<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ap010gi2e</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ap010gi2e.github.io/"/>
  <updated>2017-12-13T06:12:12.190Z</updated>
  <id>http://ap010gi2e.github.io/</id>
  
  <author>
    <name>ap010gi2e</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux文本流</title>
    <link href="http://ap010gi2e.github.io/2017/12/13/cjb4nwde90005ods684lp5mxf/"/>
    <id>http://ap010gi2e.github.io/2017/12/13/cjb4nwde90005ods684lp5mxf/</id>
    <published>2017-12-12T16:44:09.000Z</published>
    <updated>2017-12-13T06:12:12.190Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux文本流"><a href="#Linux文本流" class="headerlink" title="Linux文本流"></a>Linux文本流</h2><p>当unix执行一个程序的时候,会自动打开三个流,标准输入、标准输出、标准错误.对于一个程序来说尽管它总是会打开这三个流,但是它会根据需要实用,并不<br>一定要使用.</p><ul><li><code>ls</code>命令是可以列出目录内容的命令,其结果这里作为一个标准输入的流.<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ls</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>因为命令行工具也是一个程序,所以当输入命令之后,输出的文本流会显示到屏幕上.</p></blockquote><ul><li>当然还可以重定向文本流的输出.比如在命令行可以使用<code>&gt;</code>符号.<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ls &gt; a.txt</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>该命令会将原本要输出到屏幕的文本流重定向到文件中.</p></blockquote><ul><li><p>还有一个<code>&gt;&gt;</code>符号,也是重定向标准输出,与上一个命令的区别是,该命令会在已经存在的文件追加结果,而<code>&gt;</code>会新建文件.</p></li><li><p><code>echo</code>命令会将文本流导向标准输出.其实和<code>ls</code>同理,只不过一个是得到的结果的文本流,一个是自己定义的文本流.只是例子,重点关注在文本流这个概念上.</p></li><li><p>也可以使用<code>&lt;</code>来改变标准输入,比如<code>cat</code>命令.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cat &lt; a.txt</span><br></pre></td></tr></table></figure></li><li><p>我们将<code>cat</code>的标准输入指向a.txt,文本流会从文件流到<code>cat</code>,然后输出到屏幕上.还有一种高级的用法就是可以同时重定向标准输出.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cat &lt; a.txt &gt; b.txt</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>这样a.txt的内容就会被复制到b.txt中</p></blockquote><ul><li>另一个<code>&gt;&amp;</code>可以同时重定向标准输出和标准错误.<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd nodir &gt;&amp; a.txt</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>会将错误信息和标准输出都重定向到a.txt</p></blockquote><ul><li>当然也有只想重定向标准错误的命令<code>2&gt;</code>,就可以只把标准错误重定向.<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd nodir 2&gt; a.txt &gt; b.txt</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>这样,标准错误就被重定向到a.txt,而标准输出则输出到了b.txt</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Linux文本流&quot;&gt;&lt;a href=&quot;#Linux文本流&quot; class=&quot;headerlink&quot; title=&quot;Linux文本流&quot;&gt;&lt;/a&gt;Linux文本流&lt;/h2&gt;&lt;p&gt;当unix执行一个程序的时候,会自动打开三个流,标准输入、标准输出、标准错误.对于一个程序来
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux进程基础</title>
    <link href="http://ap010gi2e.github.io/2017/12/12/cjb4nwde80004ods669rwvges/"/>
    <id>http://ap010gi2e.github.io/2017/12/12/cjb4nwde80004ods669rwvges/</id>
    <published>2017-12-12T15:22:35.000Z</published>
    <updated>2017-12-12T15:50:33.658Z</updated>
    
    <content type="html"><![CDATA[<h2 id="指令和程序"><a href="#指令和程序" class="headerlink" title="指令和程序"></a>指令和程序</h2><ul><li>一些最基础的计算机动作被称为‘指令’,而程序就是一系列的指令所构成的集合.通过程序,就可以完成一些复杂的操作了.</li></ul><h2 id="程序和进程"><a href="#程序和进程" class="headerlink" title="程序和进程"></a>程序和进程</h2><ul><li>进程是程序的一个具体实现.进程可以理解为是程序运行的过程.而同一个程序可以执行多次,每次都可以在内存中独立自己的空间.从而产生多个程序进程.不同的进程还可以拥有各自独立的IO接口.</li><li>而操作系统的一个重要的功能就是为了进程而提供方便.比如为进程分配内存空间,管理进程的相关信息等功能.</li><li>进程可以使用命令ps查看,相关参数自己查看.</li></ul><h2 id="创建进程"><a href="#创建进程" class="headerlink" title="创建进程"></a>创建进程</h2><ul><li>Linux内核只建立了一个init进程.内核并不提供直接建立新进程的系统调用.所有的其他进程都是init进程通过fork机制建立的.也就是说新的线程要通过老的进程自己复制自己得到,而这就是fork.fork是一个系统调用.进程存活于内存中.每个进程都在内存中分配有属于自己的空间.当进程fork的时候,Linux内存中会分配一个新的内存空间给新的进程,并将老的进程空间中的内容复制给新的空间中,然后两个进程同时运行.老进程就是父线程.而新进程就是子进程.</li><li>一个进程除了有PID之外,还会有一个PPID来存储父进程的PID.</li><li>fork通常作为一个系统调用执行.它会有两次返回,将子进程的PID返回给父进程,0返回给子进程.实际上,子进程总是可以通过PPID查询到自己的父进程.</li><li>当一个PID为0的时候,就说明该进程是一个子进程.</li><li>而当一个PID为一个正整数的时候,说明该进程是一个父进程.</li></ul><h2 id="子进程的终结"><a href="#子进程的终结" class="headerlink" title="子进程的终结"></a>子进程的终结</h2><blockquote><p>插入一段自己的理解,可能以后也是为了更正自己或者提醒自己,我未来一定会问我自己为什么是子进程的终结,而没有提到父进程的终结.因为Linux内核提供init进程之后,所有的进程都是init的子进程.所以我的理解就是,没有关闭父进程的情况.还有,若是多进程的话,相对于多个该程序的子进程来讲,是有一个主进程的.所以这个主进程也是一个子进程.(至少目前我是这么认为的)</p></blockquote><ul><li>当一个子进程终结的时候,它就会通知父进程.并且会清空自己在内存中占用的空间,并且在内存中留下自己的退出信息.<ul><li>如果退出顺利的话,这个退出信息为0</li><li>如果退出不顺利的话,这个退出信息为正整数</li></ul></li><li>在这个退出信息中,会解释该进程为什么会退出.</li><li>此时,父进程有有义务对子进程使用wait系统调用.这个wait函数能够从内核中取出子进程的退出信息,并清空该信息在内存中占用的空间.</li><li>但是也有特殊情况.当父进程早于子进程终结的话,子进程就失去了上层关系.成了孤儿进程,而孤儿进程此时会过继给init进程,所以这个时候init进程负责该子进程的wait函数调用.</li><li>还有一种可能性,就是退出的时候退出信息还是会留在内核中,这种就是所谓的僵尸进程.僵尸进程会占用内存空间.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;指令和程序&quot;&gt;&lt;a href=&quot;#指令和程序&quot; class=&quot;headerlink&quot; title=&quot;指令和程序&quot;&gt;&lt;/a&gt;指令和程序&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一些最基础的计算机动作被称为‘指令’,而程序就是一系列的指令所构成的集合.通过程序,就可以完成一些复杂的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>文件描述符</title>
    <link href="http://ap010gi2e.github.io/2017/12/10/cjb4nwde50001ods6t83bs6hf/"/>
    <id>http://ap010gi2e.github.io/2017/12/10/cjb4nwde50001ods6t83bs6hf/</id>
    <published>2017-12-10T12:35:54.000Z</published>
    <updated>2017-12-10T13:09:57.352Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>文件描述符（File descriptor）是计算机科学中的一个术语，是一个用于表述指向文件的引用的抽象化概念。</p><ul><li>文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。在程序设计中，一些涉及底层的程序编写往往会围绕着文件描述符展开。但是文件描述符这一概念往往只适用于UNIX、Linux这样的操作系统。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>基于文件描述符的I/O操作兼容POSIX标准。</li><li>在UNIX、Linux的系统调用中，大量的系统调用都是依赖于文件描述符。</li><li>此外，在Linux系列的操作系统上，由于Linux的设计思想便是把一切设备都视作文件。因此，文件描述符为在该系列平台上进行设备相关的编程实际上提供了一个统一的方法。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>在非UNIX/Linux 操作系统上（如Windows），无法基于这一概念进行编程——事实上，Windows下的文件描述符和信号量、互斥锁等内核对象一样都记作HANDLE。</li><li>由于文件描述符在形式上不过是个整数，当代码量增大时，会使编程者难以分清哪些整数意味着数据，哪些意味着文件描述符。因此，完成的代码可读性也就会变得很差，这一点一般通过消除魔术数字来解决。</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>对于ANSI C规范中定义的标准库的文件I/O操作。ANSI C规范给出了一个解决方法，就是使用FILE结构体的指针。事实上，UNIX/Linux平台上的FILE结构体的实现中往往都是封装了文件描述符变量在其中。</li><li>在UNIX/Linux平台上，对于控制台（Console）的标准输入，标准输出，标准错误输出也对应了三个文件描述符。它们分别是0,1,2。在实际编程中，如果要操作这三个文件描述符时，建议使用<unistd.h>头文件中定义的三个宏来表示：STDIN_FILENO, STDOUT_FILENO以及STDERR_FILENO。</unistd.h></li><li>对于一个进程而言，文件描述符的变化范围为0~OPEN_MAX[3].</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;文件描述符（File descriptor）是计算机科学中的一个术语，是一个用于表述指向文件的引用的抽象化概念。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>同步、异步、阻塞、非阻塞</title>
    <link href="http://ap010gi2e.github.io/2017/12/10/cjb4nwde20000ods6zyctifad/"/>
    <id>http://ap010gi2e.github.io/2017/12/10/cjb4nwde20000ods6zyctifad/</id>
    <published>2017-12-10T09:20:42.000Z</published>
    <updated>2017-12-10T13:10:03.070Z</updated>
    
    <content type="html"><![CDATA[<h2 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h2><ul><li>阻塞是指在调用结果返回之前，当前的线程会被挂起。函数只有得到返回结果的时候才会返回。</li></ul><h2 id="非阻塞"><a href="#非阻塞" class="headerlink" title="非阻塞"></a>非阻塞</h2><ul><li>非阻塞和阻塞是相对的概念，指在没有得到结果之前，该函数不会阻塞当前线程，而会立刻返回。</li></ul><h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><ul><li>所谓同步，就是在发出一个功能调用时，在没有得到结果之前，该调用就不返回。</li></ul><h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><ul><li>异步的概念和同步相对。当一个异步过程调用发出后，调用者不能立刻得到结果。实际处理这个调用的部件在完成后，通过状态、通知和回调来通知调用者。</li></ul><h2 id="对象的阻塞模式和阻塞函数调用"><a href="#对象的阻塞模式和阻塞函数调用" class="headerlink" title="对象的阻塞模式和阻塞函数调用"></a>对象的阻塞模式和阻塞函数调用</h2><ul><li>对象是否处于阻塞模式和函数是不是阻塞调用有很强的相关性，但是并不是一一对应的。阻塞对象上可以有非阻塞的调用方式，我们可以通过一定的API去轮询状态，在适当的时候调用阻塞函数，就可以避免阻塞。而对于非阻塞对象，调用特殊的函数也可以进入阻塞调用。函数select就是这样的一个例子。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;阻塞&quot;&gt;&lt;a href=&quot;#阻塞&quot; class=&quot;headerlink&quot; title=&quot;阻塞&quot;&gt;&lt;/a&gt;阻塞&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;阻塞是指在调用结果返回之前，当前的线程会被挂起。函数只有得到返回结果的时候才会返回。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;非阻
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>进程和线程</title>
    <link href="http://ap010gi2e.github.io/2017/12/10/cjb4nwde70003ods6qvghbi56/"/>
    <id>http://ap010gi2e.github.io/2017/12/10/cjb4nwde70003ods6qvghbi56/</id>
    <published>2017-12-10T06:49:24.000Z</published>
    <updated>2017-12-10T13:10:07.016Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动,进程是系统进行资源分配和调度的一个独立单位。</li><li>线程是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源.</li></ul><h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><ul><li>一个线程可以创建和撤销另一个线程;同一个进程中的多个线程之间可以并发执行.</li><li>相对进程而言，线程是一个更加接近于执行体的概念，它可以与同进程中的其他线程共享数据，但拥有自己的栈空间，拥有独立的执行序列。</li></ul><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>进程和线程的主要差别在于它们是不同的操作系统资源管理方式。进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。</p><ul><li>简而言之,一个程序至少有一个进程,一个进程至少有一个线程.</li><li>线程的划分尺度小于进程，使得多线程程序的并发性高。</li><li>另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。</li><li>线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。</li><li>从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。</li></ul><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><ul><li>线程和进程在使用上各有优缺点：线程执行开销小，但不利于资源的管理和保护；而进程正相反。同时，线程适合于在SMP机器上运行，而进程则可以跨机器迁移。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动,进程是系统进行资源分配和调度的一个独立单位。&lt;/li&gt;
&lt;li&gt;线
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>进、线程间通信</title>
    <link href="http://ap010gi2e.github.io/2017/12/10/cjb4nwde60002ods6tiv6vhh7/"/>
    <id>http://ap010gi2e.github.io/2017/12/10/cjb4nwde60002ods6tiv6vhh7/</id>
    <published>2017-12-10T05:12:58.000Z</published>
    <updated>2017-12-10T13:10:10.117Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、进程间通信"><a href="#一、进程间通信" class="headerlink" title="一、进程间通信"></a>一、进程间通信</h2><ul><li>管道(pipe):一种半双工的通信方式。数据单向传输。只能在具有亲缘关系的进程间使用。</li><li>有名管道(namepipe):区别在于它允许非亲缘关系的进程间通信。</li><li>信号量(semaphore):是一种计数器，可以控制多个进程对共享资源的访问。常作为一种锁机制，用来防止多个进程同时访问共享资源。主要用作进程间以及同一进程内不同线程之间的同步手段。</li><li>信号(signal):比较复杂的通信方式，用于通知接收进程某个事件已经发生。</li><li>消息队列(messagequeue):由消息的链表存放在内核中，并由消息队列标识符标识。克服了信号传递信息少，管道只能承载无格式字节流以及缓冲区大小受限等问题。</li><li>共享内存(shared memory):通过映射一段能被其他进程访问的内存。由一个进程创建，多个进程共享访问。是最快的IPC方式。常常与其他通信机制配合使用。如信号量等，来实现进程间的同步和通信。</li><li>套接字(socket):可用于不同之间的进程通信。</li></ul><h2 id="二、线程间通信"><a href="#二、线程间通信" class="headerlink" title="二、线程间通信"></a>二、线程间通信</h2><ul><li>锁机制<ul><li>互斥锁:一种同步机制，防止多个线程共同操作同一共享资源。</li><li>读写锁:允许多个线程同时读取共享数据，但是对于写操作则是互斥的。</li><li>条件变量:可以以原子的方式阻塞进程，直到某个特定条件为真时为止。对条件的测试是在互斥锁的保护下进行的。条件变量始终与互斥锁一起使用。</li></ul></li><li>信号量机制:包括无名线程信号量和命名线程信号量。</li><li>信号机制:类似进程间的信号处理。</li><li>线程间的通信目的主要是用于线程同步，所以线程没有像进程通信中的用于数据交换的通信机制。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、进程间通信&quot;&gt;&lt;a href=&quot;#一、进程间通信&quot; class=&quot;headerlink&quot; title=&quot;一、进程间通信&quot;&gt;&lt;/a&gt;一、进程间通信&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;管道(pipe):一种半双工的通信方式。数据单向传输。只能在具有亲缘关系的进程间使用。&lt;
      
    
    </summary>
    
    
  </entry>
  
</feed>
